/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package haiyan.exp;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 24;
            return 31;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 82;
         if ((active0 & 0x400000000L) != 0L)
            return 120;
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
            return 34;
         }
         return -1;
      case 2:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
            return 34;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 38:
         return jjStartNfaWithStates_0(0, 34, 120);
      case 40:
         return jjStopAtPos(0, 40);
      case 41:
         return jjStopAtPos(0, 41);
      case 42:
         return jjStopAtPos(0, 37);
      case 43:
         return jjStopAtPos(0, 35);
      case 44:
         return jjStopAtPos(0, 42);
      case 45:
         return jjStopAtPos(0, 36);
      case 47:
         return jjStartNfaWithStates_0(0, 38, 82);
      case 60:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x280000000L);
      case 61:
         return jjStopAtPos(0, 28);
      case 62:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 94:
         return jjStopAtPos(0, 39);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 34);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 161;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(88, 89);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(3, 18);
                  }
                  else if (curChar == 38)
                     jjAddStates(19, 24);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(94, 99);
                  else if (curChar == 47)
                     jjAddStates(25, 26);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(36, 37);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 31:
               case 34:
                  if ((0x7ff400000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(34);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 30);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 47)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 47)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 7:
                  if (curChar == 32)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 58)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 58)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 32)
                     jjCheckNAddStates(34, 36);
                  break;
               case 15:
                  if (curChar == 35 && kind > 17)
                     kind = 17;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 58)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 58)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 32)
                     jjCheckNAddStates(37, 39);
                  break;
               case 35:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar != 34)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 81:
                  if (curChar == 47)
                     jjAddStates(25, 26);
                  break;
               case 83:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 84:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 85:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 86:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 88:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar == 42)
                     jjAddStates(40, 41);
                  break;
               case 90:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(91, 89);
                  break;
               case 91:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(91, 89);
                  break;
               case 92:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 93:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(94, 99);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(42, 44);
                  break;
               case 96:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(97, 98);
                  break;
               case 98:
                  if ((0xa00000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(45, 47);
                  break;
               case 101:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(102);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(102, 103);
                  break;
               case 103:
                  if ((0xa00000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(3, 18);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(48, 50);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(106, 107);
                  break;
               case 107:
                  if (curChar != 46)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(51, 53);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(51, 53);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 111:
                  if (curChar == 38 && kind > 7)
                     kind = 7;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(112);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(113, 114);
                  break;
               case 114:
                  if (curChar == 38 && kind > 9)
                     kind = 9;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(54, 56);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 117:
                  if (curChar != 46)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(57, 59);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(57, 59);
                  break;
               case 119:
                  if (curChar == 38)
                     jjAddStates(19, 24);
                  break;
               case 121:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(125, 111);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(131, 114);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAdd(34);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(60, 62);
                  else if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(156, 39);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(63, 65);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(66, 68);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(69, 70);
                  else if ((0x4000000040000L & l) != 0L)
                     jjAddStates(71, 74);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(75, 77);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(78, 79);
                  else if ((0x100000001000L & l) != 0L)
                     jjAddStates(80, 83);
                  else if ((0x800000008L & l) != 0L)
                     jjAddStates(84, 85);
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 120:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(131);
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(127);
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(125);
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(123);
                  break;
               case 31:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAdd(34);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 14:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
               case 24:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
               case 25:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 26:
                  if ((0x10000000100000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 27:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(34);
                  break;
               case 36:
                  jjAddStates(86, 87);
                  break;
               case 38:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 39:
                  if ((0x4000000040000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 40:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 41:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 43:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(80, 83);
                  break;
               case 46:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x400000004L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 49:
               case 70:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 50:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x400000004000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 54:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 57:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 58:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 59:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(75, 77);
                  break;
               case 61:
                  if ((0x1000000010L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 62:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 63:
               case 146:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 64:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 66:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(71, 74);
                  break;
               case 67:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 68:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x100000001000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 75:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
               case 144:
               case 154:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 79:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 83:
                  jjAddStates(0, 2);
                  break;
               case 88:
                  jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
               case 91:
                  jjCheckNAddTwoStates(91, 89);
                  break;
               case 95:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 98:
                  if (curChar == 64 && kind > 7)
                     kind = 7;
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(90, 91);
                  break;
               case 103:
                  if (curChar == 64 && kind > 14)
                     kind = 14;
                  break;
               case 122:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(123);
                  break;
               case 123:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(123);
                  break;
               case 124:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(125);
                  break;
               case 125:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(125, 111);
                  break;
               case 126:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(127);
                  break;
               case 127:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(127);
                  break;
               case 128:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 130:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(131);
                  break;
               case 131:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(131, 114);
                  break;
               case 132:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 133:
                  if ((0x2000000020L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 134:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(133);
                  break;
               case 135:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x800000008L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 137:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(66, 68);
                  break;
               case 141:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(133);
                  break;
               case 142:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(63, 65);
                  break;
               case 150:
                  if ((0x1000000010L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 151:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x8000000080000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 153:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 155:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(156, 39);
                  break;
               case 156:
                  if ((0x4000000040000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 157:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(60, 62);
                  break;
               case 158:
                  if ((0x4000000040L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 159:
                  if ((0x4000000040L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 160:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(86, 87);
                  break;
               case 83:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
               case 91:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(91, 89);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 161 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   83, 84, 86, 105, 106, 107, 95, 98, 109, 110, 111, 112, 113, 114, 115, 116, 
   117, 100, 103, 120, 122, 124, 126, 128, 130, 82, 87, 2, 3, 18, 19, 6, 
   7, 15, 13, 16, 17, 23, 24, 25, 90, 92, 94, 95, 98, 99, 100, 103, 
   105, 95, 98, 108, 95, 98, 115, 100, 103, 118, 100, 103, 158, 159, 160, 151, 
   153, 154, 143, 145, 148, 135, 139, 69, 73, 77, 80, 62, 64, 65, 57, 59, 
   47, 51, 53, 55, 41, 44, 36, 37, 96, 97, 101, 102, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\75", "\74", "\76", "\74\75", "\76\75", "\74\76", "\46", "\53", "\55", "\52", 
"\57", "\136", "\50", "\51", "\54", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7fff9f24381L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[161];
private final int[] jjstateSet = new int[322];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 161; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
